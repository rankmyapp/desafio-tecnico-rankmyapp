// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sale.sql

package models

import (
	"context"
	"database/sql"
)

const createSale = `-- name: CreateSale :exec
INSERT INTO sales (
    id,
    ticket_id,
    user_id,
    payment_type
) 
VALUES (
    ?, ?, ?, ?
)
`

type CreateSaleParams struct {
	ID          string         `json:"id"`
	TicketID    string         `json:"ticket_id"`
	UserID      string         `json:"user_id"`
	PaymentType sql.NullString `json:"payment_type"`
}

func (q *Queries) CreateSale(ctx context.Context, arg CreateSaleParams) error {
	_, err := q.db.ExecContext(ctx, createSale,
		arg.ID,
		arg.TicketID,
		arg.UserID,
		arg.PaymentType,
	)
	return err
}

const getSaleByID = `-- name: GetSaleByID :one
SELECT
    id, ticket_id, user_id, payment_type, created_at
FROM
    sales
WHERE
    id = ?
`

func (q *Queries) GetSaleByID(ctx context.Context, id string) (Sale, error) {
	row := q.db.QueryRowContext(ctx, getSaleByID, id)
	var i Sale
	err := row.Scan(
		&i.ID,
		&i.TicketID,
		&i.UserID,
		&i.PaymentType,
		&i.CreatedAt,
	)
	return i, err
}
