// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: ticket.sql

package models

import (
	"context"
)

const getAllTickets = `-- name: GetAllTickets :many
SELECT
    id, type, price, quantity
FROM
    tickets
`

func (q *Queries) GetAllTickets(ctx context.Context) ([]Ticket, error) {
	rows, err := q.db.QueryContext(ctx, getAllTickets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Ticket{}
	for rows.Next() {
		var i Ticket
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Price,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTicketByID = `-- name: GetTicketByID :one
SELECT
    id, type, price, quantity
FROM
    tickets
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetTicketByID(ctx context.Context, id string) (Ticket, error) {
	row := q.db.QueryRowContext(ctx, getTicketByID, id)
	var i Ticket
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Price,
		&i.Quantity,
	)
	return i, err
}

const updateTicketQuantity = `-- name: UpdateTicketQuantity :exec
UPDATE
    tickets
SET
    quantity = ?
WHERE
    id = ?
`

type UpdateTicketQuantityParams struct {
	Quantity int32  `json:"quantity"`
	ID       string `json:"id"`
}

func (q *Queries) UpdateTicketQuantity(ctx context.Context, arg UpdateTicketQuantityParams) error {
	_, err := q.db.ExecContext(ctx, updateTicketQuantity, arg.Quantity, arg.ID)
	return err
}
